const vscode = require('vscode');

let statusBarItem;
let timerInterval;
let deadlineDate;
let dayBeforeShown = false;  // –ó–∞ —Å—É—Ç–∫–∏ –ø–∞–Ω–µ–ª—å
let afterShown = false;      // –ü–æ—Å–ª–µ –¥–µ–¥–ª–∞–π–Ω–∞ –ø–∞–Ω–µ–ª—å

function activate(context) {
  let startCmd =
      vscode.commands.registerCommand('deadline-timer.start', async function() {
        const input = await vscode.window.showInputBox(
            {prompt: '–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú'});
        if (!input) return;

        const parsed = new Date(input);
        if (isNaN(parsed.getTime())) {
          vscode.window.showErrorMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.');
          return;
        }

        deadlineDate = parsed;
        dayBeforeShown = false;
        afterShown = false;

        startStatusBarTimer(context);
        vscode.window.showInformationMessage('‚è± –¢–∞–π–º–µ—Ä –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–ø—É—â–µ–Ω');
      });

  context.subscriptions.push(startCmd);
}

function startStatusBarTimer(context) {
  if (!statusBarItem) {
    statusBarItem =
        vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);
    statusBarItem.command = 'deadline-timer.start';
    context.subscriptions.push(statusBarItem);
  }
  statusBarItem.show();

  if (timerInterval) clearInterval(timerInterval);
  timerInterval = setInterval(() => {
    updateStatusBar(context);
  }, 1000);
}

function updateStatusBar(context) {
  if (!deadlineDate) return;

  const now = new Date();
  const diff = deadlineDate - now;

  // üö® –î–µ–¥–ª–∞–π–Ω –ø—Ä–æ—à—ë–ª
  if (diff <= 0) {
    statusBarItem.text = `üö® –î–µ–¥–ª–∞–π–Ω –∏—Å—Ç—ë–∫! –ü–µ—á–∞–ª–∏–∫ :(`;

    if (!afterShown) {
      afterShown = true;
      openAfterDeadlinePanel(context);
    }
    return;
  }

  // ‚ö†Ô∏è –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ ‚â§ 24 —á–∞—Å–æ–≤
  if (diff <= 24 * 60 * 60 * 1000 && !dayBeforeShown) {
    dayBeforeShown = true;
    openBeforeDeadlinePanel(context);
  }

  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diff / (1000 * 60 * 60)) % 24);
  const minutes = Math.floor((diff / (1000 * 60)) % 60);
  const seconds = Math.floor((diff / 1000) % 60);

  statusBarItem.text = `‚è± ${days}–¥ ${hours}—á ${minutes}–º ${seconds}—Å`;
}

// –ü–∞–Ω–µ–ª—å –∑–∞ —Å—É—Ç–∫–∏
function openBeforeDeadlinePanel(context) {
  const panel = vscode.window.createWebviewPanel(
      'deadlineTimerBefore', '‚ö†Ô∏è –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ —Å—É—Ç–∫–∏! –î–µ–ª–∞–π –±—ã—Å—Ç—Ä–µ–µ üò°',
      vscode.ViewColumn.One, {
        enableScripts: true,
        localResourceRoots: [vscode.Uri.joinPath(context.extensionUri, 'media')]
      });

  const beforeImg = panel.webview.asWebviewUri(
      vscode.Uri.joinPath(context.extensionUri, 'media', 'before.png'));

  panel.webview.html = `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <title>‚ö†Ô∏è –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ —Å—É—Ç–∫–∏! –î–µ–ª–∞–π –±—ã—Å—Ç—Ä–µ–µ üò°</title>
            <style>body { font-family:sans-serif; text-align:center; padding:20px; } img { max-width:300px; margin-top:20px; }</style>
        </head>
        <body>
            <h2>‚ö†Ô∏è –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ —Å—É—Ç–∫–∏! –î–µ–ª–∞–π –±—ã—Å—Ç—Ä–µ–µ üò°</h2>
            <img src="${beforeImg}">
        </body>
        </html>
    `;
}

// –ü–∞–Ω–µ–ª—å –ø–æ—Å–ª–µ –¥–µ–¥–ª–∞–π–Ω–∞
function openAfterDeadlinePanel(context) {
  const panel = vscode.window.createWebviewPanel(
      'deadlineTimerAfter', 'üö® –î–µ–¥–ª–∞–π–Ω –∏—Å—Ç—ë–∫! –ü–µ—á–∞–ª–∏–∫ :(',
      vscode.ViewColumn.One, {
        enableScripts: true,
        localResourceRoots: [vscode.Uri.joinPath(context.extensionUri, 'media')]
      });

  const afterImg = panel.webview.asWebviewUri(
      vscode.Uri.joinPath(context.extensionUri, 'media', 'after.png'));

  panel.webview.html = `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <title>üö® –î–µ–¥–ª–∞–π–Ω –∏—Å—Ç—ë–∫! –ü–µ—á–∞–ª–∏–∫ :(</title>
            <style>body { font-family:sans-serif; text-align:center; padding:20px; } img { max-width:300px; margin-top:20px; }</style>
        </head>
        <body>
            <h2>üö® –î–µ–¥–ª–∞–π–Ω –∏—Å—Ç—ë–∫! –ü–µ—á–∞–ª–∏–∫ :(</h2>
            <img src="${afterImg}">
        </body>
        </html>
    `;
}

function deactivate() {
  if (timerInterval) clearInterval(timerInterval);
  if (statusBarItem) statusBarItem.dispose();
}

module.exports = {
  activate,
  deactivate
};